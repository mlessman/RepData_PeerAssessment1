y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[3,5,7]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4,5)
dim(myVector)
attributes(myVector)
class(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix
myMatrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(myMatrix, myMatrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(myData) <- cnames
myData
x <- list(a = 1:5, b = nnorm (10))
x <- list(a = 1:5, b = rnorm(10))
lapply(x,mean)
z <- lapply(x,mean)
class(z)
z
rm(z)
z <- list(1:5,110)
z
lapply(z,mean)
names(z)
names(z) <- c("a", "b")
names(z)
z$a
z$b
install.packages("jsonlite")
library(jsonlite)
library(XML)
library(xlsx)
help(datasets)
install.packages("RMySQL")
library(jsonlite)
myjson <- toJSON(iris, pretty=TRUE)
cat(myjson)
iris2 <- fromJSON(myjson)
head(iris2)
library(data.table)
DT = data.table(x=rnorm(9), y=rep(c("a","b","c"),each=3), z=rnorm(9))
head(DT)
DT
tables()
tables()
DT[2,]
DT[DT$y=="a",]
DT[c(2,3)]
DT[,c(2,3)]
DT[,list(mean(x),sum(z))]
DT[,table(y)]
DT[,w:=z^2]
DT
DT2 <- DT
DT[,y:=2]
DT
DT2
DT[,m:={tmp <- (x+z); log2(tmp+5)}]
DT
DT2
DT[,a:=x>0]
DT
DT[,b:=mean(x+w),by=a]
DT
set.seed(123)
DT <- data.table(x=sample(letters[1:3], 1E5, TRUE))
DT
DT
DT[, .N, by=x]
table(DT$x)
system.time(table(DT$x))
DT <- data.table(x=rep(c("a","b","c"), each =100), y=rnorm(300))
setkey(DT,x)
DT['a']
DT
DT['b']
install.packages("httr")
library(httr)
install.package("foreign")
install.packages("foreign")
install.packages("RMySQL", type="source")
library(RmySQL)
library(RMySQL)
install.packages(“RMySQL”, type = “source”)
install.packages(“RMySQL”, type = “source”)
install.packages("RMySQL", type="source")
library(RMySQL)
library(RMySQL)
install.packages(“RMySQL”, type = “source”)
install.packages(“RMySQL”, type = “source”)
install.packages("RMySQL", type ="source")
library(RMySQL)
install.packages("RMySQL", type ="source")
libarary(RMySQL)
library(RMySQL)
install.packages(“RMySQL”, type = “source”)
install.packages("RMySQL", type = "source")
library(RMySQL)
install.packages("RMySQL", type = "source")
library(RMySQL)
install.packages("RMySQL", type = "source")
library(RMySQL)
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
library(RMySQL)
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
library(RMySQL)
library
packages
ls
environment
environment()
list
library("RMySQL", lib.loc="C:/Users/Hello/Documents/R/win-library/3.1")
install.packages("plyr")
install.packages("ggplot2")
install.packages("stringr")
install.packages("lubridate")
library(plyr)
library(lubridate)
install.packages("Hmisc")
install.packages("reshape2")
getwd()
getwd()
getwd()
year_team <- read.csv(file.choose())
year_team$AVG <- with(year_team, (H/(AB)))
year_team$OBP <- with(year_team, ((H+BB+HBP)/(AB+BB+HBP+SF)))
year_team$SLG <- with(year_team, ((H+X2B+2*X3B+3*HR)/(AB)))
year_team$OPS <- with(year_team, OBP + SLG)
corr_plot <- function(v1, v2, df) {
plot(df[[v1]], df[[v2]], xlab=v1, ylab=v2) # Draw scatter Plot
linfit <- lm(df[[v2]]~df[[v1]]) # Calculate best-fit line
abline(linfit) # Draw best-fit line
# Add R^2 value in legend
legend("topleft", legend = paste("R^2:", signif(summary(linfit)$r.squared, 4)))
}
# Add 1B for calculation simplicity
year_team$X1B <- with(year_team, H-X2B-X3B-HR)
# First we'll only use different types of hits
lin_basic_weights <- lm(R ~ X1B + X2B + X3B + HR, data=year_team)
# Apply model's coefficients to predict past runs
year_team$linRBasic <- predict(lin_basic_weights)
# Now let's add in BB, HBP, and SB to improve the regression's accuracy.
lin_more_weights <- lm(R ~ X1B + X2B + X3B + HR + I(BB + HBP) + SB, data=year_team)
year_team$linRMore <- predict(lin_more_weights)
corr_plot('HR', 'HR', year_team)
corr_plot('HR', 'HBP', year_team)
corr_plot('SF', 'R', year_team)
names(year_team)
corr_plot('AVG','R',year_team)
corr_plot('SLG','R',year_team)
corr_plot('OBP','R',year_team)
corr_plot('OPS','R',year_team)
corr_plot('linRBasic','R',year_team)
corr_plot('linRMore','R',year_team)
intall.packages("knitr")
instal.packages("knitr")
install.packages("knitr")
# Reproducible Research: Peer Assessment 1
## Loading and preprocessing the data
```{r}
data <- read.csv("activity.csv", colClasses = "character")
data$steps <- as.numeric(data$steps)
```
## Remove NAs
```{r}
data1 <- is.na(data$steps)
data2 <- data[!data1,]
data2$date <- as.Date(data2$date)
data2$steps <- as.numeric(data2$steps)
data2$day <- weekdays(data2$date)
```
```{r}
head(data2)
```
## What is mean total number of steps taken per day?
```{r}
dataStepsDay <- tapply(data2$steps, data2$date, sum)
mean(dataStepsDay)
median(dataStepsDay)
hist(dataStepsDay, main = "Histogram of Steps per Day", xlab = "Steps per Day")
```
## What is the average daily activity pattern?
```{r}
data6 <- tapply(data2$steps, data2$interval, mean)
data7 <- data.frame(as.numeric(names(data6)), as.numeric(data6))
names(data7) <- c("interval", "avgSteps")
head(data7)
with(data7, plot(interval, avgSteps, type = "l"))
```
## Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r}
maxIntervalData <- data7[data7$avgSteps == max(data7$avgSteps),]
maxIntervalData$interval
```
## Imputing missing values
```{r}
sum(data1)
```
There are `r sum(data1)` missing values.
## Filling in Missing Values
```{r}
head(data)
dataImp <- data
dataImp$fix <- is.na(dataImp$steps)
dataImp$fix1 <- as.numeric("NA")
for(i in 1:nrow(dataImp)){
if(dataImp$fix[i]==TRUE){
dataImp$fix1[i] <- mean(data2$steps)
}else{
dataImp$fix1[i] <- dataImp$steps[i]
}
}
```
## Histogram with Imputed Values
```{r}
dataStepsImp <- tapply(dataImp$fix1, dataImp$date, sum)
hist(dataStepsImp, main = "Histogram of Steps per Day", xlab = "Steps per Day")
```
## Mean and Median with Imputed Values
```{r}
mean(dataStepsImp)
median(dataStepsImp)
```
The mean with Imputed Values is: `r mean(dataStepsImp)`
The median with Imputed Values is: `r median(dataStepsImp)`
## Are there differences in activity patterns between weekdays and weekends?
```{r}
data3 <- tapply(data2$steps, data2$day, mean)
data4 <- data.frame(names(data3), as.numeric(data3))
names(data4) <- c("day", "avgSteps")
data4
with(data4, plot(day, avgSteps, type = "", xlab = "Day of the Week", ylab = "Avg Number of Steps"))
```
```{r}
data10 <- data2
data10$dayType <- "NA"
for(i in 1:nrow(data10)){
if(data10$day[i]== "Saturday" | data10$day[i]== "Sunday"){
data10$dayType[i] <- "Weekend"
}else{
data10$dayType[i] <- "Weekday"
}
}
head(data10)
dataWeekday <- data10[data10$dayType =="Weekday",]
dataWeekend <- data10[data10$dayType =="Weekend",]
data11 <- tapply(dataWeekday$steps, dataWeekday$interval, mean)
data12 <- data.frame(as.numeric(names(data11)), as.numeric(data11))
names(data12) <- c("interval", "avgSteps")
data12$dayType = "Weekday"
head(data12)
data15 <- tapply(dataWeekend$steps, dataWeekend$interval, mean)
data16 <- data.frame(as.numeric(names(data15)), as.numeric(data15))
names(data16) <- c("interval", "avgSteps")
data16$dayType = "Weekend"
head(data16)
allData <- rbind(data12,data16)
allData$interval <- as.numeric(allData$interval)
allData$avgSteps <- as.numeric(allData$avgSteps)
allData$dayType <- factor(allData$dayType)
library(lattice)
xyplot(avgSteps ~ interval | dayType, data = allData, type = "l", layout = c(1,2))
setwd("C:/Users/Hello/RepData_PeerAssessment1")
# Reproducible Research: Peer Assessment 1
## Loading and preprocessing the data
```{r}
data <- read.csv("activity.csv", colClasses = "character")
data$steps <- as.numeric(data$steps)
```
## Remove NAs
```{r}
data1 <- is.na(data$steps)
data2 <- data[!data1,]
data2$date <- as.Date(data2$date)
data2$steps <- as.numeric(data2$steps)
data2$day <- weekdays(data2$date)
```
```{r}
head(data2)
```
## What is mean total number of steps taken per day?
```{r}
dataStepsDay <- tapply(data2$steps, data2$date, sum)
mean(dataStepsDay)
median(dataStepsDay)
hist(dataStepsDay, main = "Histogram of Steps per Day", xlab = "Steps per Day")
```
## What is the average daily activity pattern?
```{r}
data6 <- tapply(data2$steps, data2$interval, mean)
data7 <- data.frame(as.numeric(names(data6)), as.numeric(data6))
names(data7) <- c("interval", "avgSteps")
head(data7)
with(data7, plot(interval, avgSteps, type = "l"))
```
## Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r}
maxIntervalData <- data7[data7$avgSteps == max(data7$avgSteps),]
maxIntervalData$interval
```
## Imputing missing values
```{r}
sum(data1)
```
There are `r sum(data1)` missing values.
## Filling in Missing Values
```{r}
head(data)
dataImp <- data
dataImp$fix <- is.na(dataImp$steps)
dataImp$fix1 <- as.numeric("NA")
for(i in 1:nrow(dataImp)){
if(dataImp$fix[i]==TRUE){
dataImp$fix1[i] <- mean(data2$steps)
}else{
dataImp$fix1[i] <- dataImp$steps[i]
}
}
```
## Histogram with Imputed Values
```{r}
dataStepsImp <- tapply(dataImp$fix1, dataImp$date, sum)
hist(dataStepsImp, main = "Histogram of Steps per Day", xlab = "Steps per Day")
```
## Mean and Median with Imputed Values
```{r}
mean(dataStepsImp)
median(dataStepsImp)
```
The mean with Imputed Values is: `r mean(dataStepsImp)`
The median with Imputed Values is: `r median(dataStepsImp)`
## Are there differences in activity patterns between weekdays and weekends?
```{r}
data3 <- tapply(data2$steps, data2$day, mean)
data4 <- data.frame(names(data3), as.numeric(data3))
names(data4) <- c("day", "avgSteps")
data4
with(data4, plot(day, avgSteps, type = "", xlab = "Day of the Week", ylab = "Avg Number of Steps"))
```
```{r}
data10 <- data2
data10$dayType <- "NA"
for(i in 1:nrow(data10)){
if(data10$day[i]== "Saturday" | data10$day[i]== "Sunday"){
data10$dayType[i] <- "Weekend"
}else{
data10$dayType[i] <- "Weekday"
}
}
head(data10)
dataWeekday <- data10[data10$dayType =="Weekday",]
dataWeekend <- data10[data10$dayType =="Weekend",]
data11 <- tapply(dataWeekday$steps, dataWeekday$interval, mean)
data12 <- data.frame(as.numeric(names(data11)), as.numeric(data11))
names(data12) <- c("interval", "avgSteps")
data12$dayType = "Weekday"
head(data12)
data15 <- tapply(dataWeekend$steps, dataWeekend$interval, mean)
data16 <- data.frame(as.numeric(names(data15)), as.numeric(data15))
names(data16) <- c("interval", "avgSteps")
data16$dayType = "Weekend"
head(data16)
allData <- rbind(data12,data16)
allData$interval <- as.numeric(allData$interval)
allData$avgSteps <- as.numeric(allData$avgSteps)
allData$dayType <- factor(allData$dayType)
library(lattice)
xyplot(avgSteps ~ interval | dayType, data = allData, type = "l", layout = c(1,2))
head(data)
data[1:5,]
names(data)
diane <- data
diane[1:5,]
data <- read.csv("activity.csv", colClasses = "character")
data$steps <- as.numeric(data$steps)
# Reproducible Research: Peer Assessment 1
## Loading and preprocessing the data
```{r}
data <- read.csv("activity.csv", colClasses = "character")
data$steps <- as.numeric(data$steps)
```
## Remove NAs
```{r}
data1 <- is.na(data$steps)
data2 <- data[!data1,]
data2$date <- as.Date(data2$date)
data2$steps <- as.numeric(data2$steps)
data2$day <- weekdays(data2$date)
```
```{r}
head(data2)
```
## What is mean total number of steps taken per day?
```{r}
dataStepsDay <- tapply(data2$steps, data2$date, sum)
mean(dataStepsDay)
median(dataStepsDay)
hist(dataStepsDay, main = "Histogram of Steps per Day", xlab = "Steps per Day")
```
## What is the average daily activity pattern?
```{r}
data6 <- tapply(data2$steps, data2$interval, mean)
data7 <- data.frame(as.numeric(names(data6)), as.numeric(data6))
names(data7) <- c("interval", "avgSteps")
head(data7)
with(data7, plot(interval, avgSteps, type = "l"))
```
## Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r}
maxIntervalData <- data7[data7$avgSteps == max(data7$avgSteps),]
maxIntervalData$interval
```
## Imputing missing values
```{r}
sum(data1)
```
There are `r sum(data1)` missing values.
## Filling in Missing Values
```{r}
head(data)
dataImp <- data
dataImp$fix <- is.na(dataImp$steps)
dataImp$fix1 <- as.numeric("NA")
for(i in 1:nrow(dataImp)){
if(dataImp$fix[i]==TRUE){
dataImp$fix1[i] <- mean(data2$steps)
}else{
dataImp$fix1[i] <- dataImp$steps[i]
}
}
```
## Histogram with Imputed Values
```{r}
dataStepsImp <- tapply(dataImp$fix1, dataImp$date, sum)
hist(dataStepsImp, main = "Histogram of Steps per Day", xlab = "Steps per Day")
```
## Mean and Median with Imputed Values
```{r}
mean(dataStepsImp)
median(dataStepsImp)
```
The mean with Imputed Values is: `r mean(dataStepsImp)`
The median with Imputed Values is: `r median(dataStepsImp)`
## Are there differences in activity patterns between weekdays and weekends?
```{r}
data3 <- tapply(data2$steps, data2$day, mean)
data4 <- data.frame(names(data3), as.numeric(data3))
names(data4) <- c("day", "avgSteps")
data4
with(data4, plot(day, avgSteps, type = "", xlab = "Day of the Week", ylab = "Avg Number of Steps"))
```
```{r}
data10 <- data2
data10$dayType <- "NA"
for(i in 1:nrow(data10)){
if(data10$day[i]== "Saturday" | data10$day[i]== "Sunday"){
data10$dayType[i] <- "Weekend"
}else{
data10$dayType[i] <- "Weekday"
}
}
head(data10)
dataWeekday <- data10[data10$dayType =="Weekday",]
dataWeekend <- data10[data10$dayType =="Weekend",]
data11 <- tapply(dataWeekday$steps, dataWeekday$interval, mean)
data12 <- data.frame(as.numeric(names(data11)), as.numeric(data11))
names(data12) <- c("interval", "avgSteps")
data12$dayType = "Weekday"
head(data12)
data15 <- tapply(dataWeekend$steps, dataWeekend$interval, mean)
data16 <- data.frame(as.numeric(names(data15)), as.numeric(data15))
names(data16) <- c("interval", "avgSteps")
data16$dayType = "Weekend"
head(data16)
allData <- rbind(data12,data16)
allData$interval <- as.numeric(allData$interval)
allData$avgSteps <- as.numeric(allData$avgSteps)
allData$dayType <- factor(allData$dayType)
library(lattice)
xyplot(avgSteps ~ interval | dayType, data = allData, type = "l", layout = c(1,2))
